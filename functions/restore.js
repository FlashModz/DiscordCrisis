const fs = require('fs').promises;
const path = require('path');
const { selectGuild, sleep, withRetry } = require('./utils');
const { showMenu } = require('./menu');
const { createLogsChannel, createFollowChannel } = require('./channels');
const { sendProgressMessage, updateProgress, finishProgress, sendProgressToLogs } = require('./logs');
const { mapPermissionOverwrites } = require('./permissions');

async function batchSendLogs(logsChannel, messages, batchSize = 5) {
  if (!logsChannel || messages.length === 0) return;
  try {
    const chunks = [];
    for (let i = 0; i < messages.length; i += batchSize) {
      chunks.push(messages.slice(i, Math.min(i + batchSize, messages.length)));
    }

    for (const chunk of chunks) {
      const content = chunk.join('\n');
      if (content.trim()) {
        await logsChannel.send(content);
        await sleep(2000);
      }
    }
  } catch (error) {
    console.error('[DEBUG] Erreur envoi batch logs:', error);
    for (const msg of messages) {
      try {
        await logsChannel.send(msg);
        await sleep(1000);
      } catch (e) {
        console.error('[DEBUG] √âchec envoi message individuel:', e);
      }
    }
  }
}

async function flushLogsBuffer(logsChannel) {
  if (logsChannel?.messageBuffer?.length > 0) {
    const messagesToSend = [...logsChannel.messageBuffer];
    logsChannel.messageBuffer = [];
    await batchSendLogs(logsChannel, messagesToSend);
  }
}

async function handleRateLimit(error) {
  if (error.code === 429) {
    const retryAfter = error.retry_after || 5000;
    console.log(`[DEBUG] Rate limit atteint, attente de ${retryAfter}ms`);
    await sleep(retryAfter);
    return true;
  }
  return false;
}

async function cleanupGuild(guild, logsChannel, progressMsg, followChannel) {
  await sendProgressToLogs(logsChannel, 'üßπ **D√©but du nettoyage du serveur**', false, true);

  // Liste des canaux prot√©g√©s
  const protectedChannels = new Set([
    'rules',           // Canal des r√®gles Discord
    'community'       // Canal communautaire Discord
  ]);

  // Liste des IDs de canaux √† pr√©server
  const preservedChannelIds = new Set([
    logsChannel?.id,
    followChannel?.id,
    guild.rulesChannelId,
    guild.publicUpdatesChannelId,
    guild.systemChannelId
  ].filter(Boolean)); // Filtre les valeurs null/undefined

  // Nettoyage des canaux
  await sendProgressToLogs(logsChannel, '‚è≥ Suppression des canaux existants...');
  const existingChannels = guild.channels.cache.filter(channel => 
    channel.deletable && 
    !protectedChannels.has(channel.name) &&
    !preservedChannelIds.has(channel.id)
  );

  await sendProgressToLogs(logsChannel, `üìä Canaux √† supprimer: ${existingChannels.size}`);
  await sendProgressToLogs(logsChannel, `üõ°Ô∏è Canaux prot√©g√©s: ${protectedChannels.size + preservedChannelIds.size}`);

  let deletedChannels = 0;
  for (const channel of existingChannels.values()) {
    try {
      await withRetry(async () => {
        await channel.delete('Nettoyage pour restauration');
        deletedChannels++;
        if (deletedChannels % 5 === 0) {
          await updateProgress(progressMsg, 5, `Suppression des canaux (${deletedChannels}/${existingChannels.size})`);
        }
      });
      
      await sleep(1500);
    } catch (error) {
      await sendProgressToLogs(logsChannel, `‚ùå Erreur suppression canal ${channel.name}: ${error.message}`);
    }
  }

  // Nettoyage des r√¥les
  await sendProgressToLogs(logsChannel, '\nüßπ **Nettoyage des r√¥les**');
  const existingRoles = guild.roles.cache.filter(role => 
    role.editable && 
    !role.managed && 
    role.name !== '@everyone'
  );

  await sendProgressToLogs(logsChannel, `üìä R√¥les √† supprimer: ${existingRoles.size}`);
  let deletedRoles = 0;

  for (const role of existingRoles.values()) {
    try {
      await withRetry(async () => {
        await role.delete('Nettoyage pour restauration');
        deletedRoles++;
        if (deletedRoles % 5 === 0) {
          await updateProgress(progressMsg, 10, `Suppression des r√¥les (${deletedRoles}/${existingRoles.size})`);
        }
      });
      
      await sleep(3000);
    } catch (error) {
      await sendProgressToLogs(logsChannel, `‚ùå Erreur suppression r√¥le ${role.name}: ${error.message}`);
    }
  }

  await sendProgressToLogs(logsChannel, '\n‚úÖ **R√©sum√© du nettoyage:**');
  await sendProgressToLogs(logsChannel, `- Canaux supprim√©s: ${deletedChannels}/${existingChannels.size}`);
  await sendProgressToLogs(logsChannel, `- R√¥les supprim√©s: ${deletedRoles}/${existingRoles.size}`);
}

async function restoreGuild(client, rl, callback) {
  console.log('\n[DEBUG] D√©marrage de la restauration...');
  try {
    const backupPath = path.join(__dirname, '..', 'backups');
    const files = await fs.readdir(backupPath);
    
    if (files.length === 0) {
      console.log('No backups found!');
      return callback(client, rl);
    }

    console.log('\nAvailable backups:');
    files.forEach((file, index) => {
      console.log(`${index + 1}. ${file}`);
    });

    rl.question('\nSelect backup number to restore: ', async (answer) => {
      const fileIndex = parseInt(answer) - 1;
      if (fileIndex < 0 || fileIndex >= files.length) {
        console.log('Invalid backup number');
        return callback(client, rl);
      }

      const backup = JSON.parse(
        await fs.readFile(path.join(backupPath, files[fileIndex]), 'utf-8')
      );

      const targetGuild = await selectGuild(client, rl);
      if (!targetGuild) return callback(client, rl);

      const logsChannel = await createLogsChannel(targetGuild);
      const followChannel = await createFollowChannel(targetGuild).catch(() => null);

      rl.question('\nRestore messages? (y/n): ', async (restoreMessages) => {
        rl.question('\nEnter User ID to give administrative rights (or press Enter to skip): ', async (adminUserId) => {
          const progressMsg = await sendProgressMessage(targetGuild, 'Restauration', followChannel || logsChannel);

          try {
            // Message d'introduction dans le canal de logs
            await sendProgressToLogs(logsChannel, '**D√©but de la restauration**', false, true);
            await sendProgressToLogs(logsChannel, `Serveur cible: ${targetGuild.name}`, false, true);
            
            // Message d'avertissement dans le canal de logs
            const warningMessage = [
              '\nüö® **== INFORMATION IMPORTANTE ==** üö®',
              '```diff',
              '- ‚ö†Ô∏è PROCESSUS DE RESTAURATION EN COURS ‚ö†Ô∏è',
              '```',
              '\nüïí **Timing & Processus:**',
              '‚Ä¢ La restauration peut prendre plusieurs minutes',
              '‚Ä¢ Discord impose des limites strictes que nous devons respecter',
              '‚Ä¢ Le bot ajuste automatiquement sa vitesse pour √©viter les erreurs',
              '\nüõ°Ô∏è **S√©curit√© & Fiabilit√©:**',
              '‚Ä¢ Chaque action est v√©rifi√©e et s√©curis√©e',
              '‚Ä¢ En cas d\'erreur, le syst√®me r√©essaiera automatiquement',
              '‚Ä¢ La progression est sauvegard√©e en temps r√©el',
              '\nüí° **Conseils:**',
              '‚Ä¢ Ne fermez pas le programme pendant la restauration',
              `‚Ä¢ La progression d√©taill√©e est disponible dans <#${followChannel?.id || logsChannel.id}>`,
              '‚Ä¢ Certaines actions pourraient n√©cessiter une intervention manuelle',
              '\n```fix',
              'üéØ La restauration va commencer dans quelques secondes...',
              followChannel ? 
                `üìå Suivez la progression en direct dans <#${followChannel.id}>` :
                'üìå Suivez la progression dans ce canal',
              '```'
            ].join('\n');

            // Message dans le canal de progression
            const progressStartMessage = [
              '```ini',
              '[Suivi de la Restauration en Direct]',
              '```',
              '‚è≥ **Progression d√©taill√©e:**',
              '‚Ä¢ Les √©tapes seront affich√©es ici en temps r√©el',
              '‚Ä¢ Chaque action sera document√©e avec son statut',
              `‚Ä¢ En cas d\'erreur, les d√©tails seront fournis dans <#${logsChannel?.id}>`,
              `\nüìå **Un Log complet de r√©sultat sera g√©n√©rer dans <#${logsChannel?.id}> **`
            ].join('\n');

            // Envoi des messages
            await logsChannel.send(warningMessage);
            if (followChannel) {
              await followChannel.send(progressStartMessage);
            }
            await sleep(5000);

            // V√©rification des permissions
            if (!targetGuild.members.me.permissions.has('Administrator')) {
              throw new Error('Le bot a besoin des permissions Administrateur');
            }

            // √âtape 1: Nettoyage
            await cleanupGuild(targetGuild, logsChannel, progressMsg, followChannel);

            // √âtape 2: Cr√©ation des r√¥les
            await sendProgressToLogs(logsChannel, '\nüîÑ **Cr√©ation des r√¥les**');
            const roleMap = new Map();
            const rolesToCreate = backup.roles.sort((a, b) => b.position - a.position);
            
            await sendProgressToLogs(logsChannel, `üìä R√¥les √† cr√©er: ${rolesToCreate.length}`);
            let createdRoles = 0;

            for (const roleData of rolesToCreate) {
              try {
                await withRetry(async () => {
                  const newRole = await targetGuild.roles.create({
                    name: roleData.name,
                    color: roleData.color,
                    hoist: roleData.hoist,
                    permissions: BigInt(roleData.permissions),
                    mentionable: roleData.mentionable,
                    position: roleData.position,
                    reason: 'Restauration de backup'
                  });

                  roleMap.set(roleData.position, newRole);
                  createdRoles++;
                  
                  if (createdRoles % 5 === 0) {
                    await updateProgress(progressMsg, 30 + (createdRoles / rolesToCreate.length * 20),
                      `Cr√©ation des r√¥les (${createdRoles}/${rolesToCreate.length})`);
                  }
                  
                  await sendProgressToLogs(logsChannel, `‚úÖ R√¥le cr√©√©: ${newRole.name}`);
                });
                
                await sleep(3000); // D√©lai plus long pour les r√¥les
              } catch (error) {
                await sendProgressToLogs(logsChannel, `‚ùå Erreur cr√©ation r√¥le ${roleData.name}: ${error.message}`);
              }
            }

            // √âtape 3: Cr√©ation des cat√©gories
            await sendProgressToLogs(logsChannel, '\nüîÑ **Cr√©ation des cat√©gories**');
            const categories = backup.channels.filter(ch => ch.type === 4);
            const categoryMap = new Map();
            
            await sendProgressToLogs(logsChannel, `üìä Cat√©gories √† cr√©er: ${categories.length}`);
            let createdCategories = 0;

            for (const categoryData of categories) {
                await progressMsg.message.edit(`üîÑ **Cr√©ation des cat√©gories** (${createdCategories}/${categories.length})`);
              try {
                await sleep(1500);
                const category = await targetGuild.channels.create({
                  name: categoryData.name,
                  type: 4,
                  permissionOverwrites: mapPermissionOverwrites(categoryData.permissionOverwrites, roleMap, targetGuild)
                });

                categoryMap.set(categoryData.name, category.id);
                createdCategories++;
                await sendProgressToLogs(logsChannel, `‚úÖ Cat√©gorie cr√©√©e: ${category.name}`);
              } catch (error) {
                await sendProgressToLogs(logsChannel, `‚ùå Erreur cr√©ation cat√©gorie ${categoryData.name}: ${error.message}`);
              }
            }

            // √âtape 4: Cr√©ation des canaux
            await sendProgressToLogs(logsChannel, '\nüîÑ **Cr√©ation des canaux**');
            const channels = backup.channels.filter(ch => ch.type !== 4);
            
            await sendProgressToLogs(logsChannel, `üìä Canaux √† cr√©er: ${channels.length}`);
            let createdChannels = 0;

            for (const channelData of channels) {
                await progressMsg.message.edit(`üîÑ **Cr√©ation des canaux** (${createdChannels}/${channels.length})`);
              try {
                await sleep(2000);
                const channelOptions = {
                  name: channelData.name,
                  type: channelData.type,
                  permissionOverwrites: mapPermissionOverwrites(channelData.permissionOverwrites, roleMap, targetGuild)
                };

                if (channelData.parent) {
                  channelOptions.parent = categoryMap.get(channelData.parent);
                }

                const channel = await targetGuild.channels.create(channelOptions);
                createdChannels++;
                await sendProgressToLogs(logsChannel, `‚úÖ Canal cr√©√©: ${channel.name}`);
              } catch (error) {
                await sendProgressToLogs(logsChannel, `‚ùå Erreur cr√©ation canal ${channelData.name}: ${error.message}`);
              }
            }

            // Rapport final
            await sendProgressToLogs(logsChannel, '\nüìä **R√©sum√© de la restauration:**', false, true);
            await sendProgressToLogs(logsChannel, `- R√¥les cr√©√©s: ${createdRoles}/${rolesToCreate.length}`, false, true);
            await sendProgressToLogs(logsChannel, `- Cat√©gories cr√©√©es: ${createdCategories}/${categories.length}`, false, true);
            await sendProgressToLogs(logsChannel, `- Canaux cr√©√©s: ${createdChannels}/${channels.length}`, false, true);

            await flushLogsBuffer(logsChannel);
            await finishProgress(progressMsg, true);
            await sendProgressToLogs(logsChannel, '‚úÖ **Restauration termin√©e avec succ√®s !**', false, true);

          } catch (error) {
            console.error('[DEBUG] Erreur critique pendant la restauration:', error);
            await finishProgress(progressMsg, false);
            await sendProgressToLogs(logsChannel, `‚ùå **Erreur**: ${error.message}`, true, true);
          }
          callback(client, rl);
        });
      });
    });
  } catch (error) {
    console.error('[DEBUG] Erreur pendant la restauration:', error);
    callback(client, rl);
  }
}

module.exports = { restoreGuild };
